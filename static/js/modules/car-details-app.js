/**
 * –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 * /static/js/modules/car-details-app.js
 */
class CarDetailsApp {
    constructor(carId) {
        this.carId = carId;
        this.apiService = new ApiService();
        this.carData = null;
        
        // –°–ª–æ–≤–∞—Ä—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞)
        this.equipmentCodes = {
            '001': '–ê–Ω—Ç–∏–±–ª–æ–∫–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–º–æ–∑–æ–≤ (ABS)',
            '002': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ–º–∞—è –ø–æ–¥–≤–µ—Å–∫–∞ (ECS)',
            '003': 'CD-–ø–ª–µ–µ—Ä',
            '004': 'AV-–º–æ–Ω–∏—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏—Ö —Å–∏–¥–µ–Ω–∏–π',
            '005': '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
            '006': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞–º–æ–∫',
            '007': '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–µ–∫–ª–æ–ø–æ–¥—ä–µ–º–Ω–∏–∫–∏',
            '008': '–£—Å–∏–ª–∏—Ç–µ–ª—å —Ä—É–ª—è',
            '010': '–õ—é–∫',
            '014': '–ö–æ–∂–∞–Ω—ã–µ —Å–∏–¥–µ–Ω—å—è',
            '015': '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∑–∞–º–æ–∫ –¥–≤–µ—Ä–µ–π',
            '017': '–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –¥–∏—Å–∫–∏',
            '019': '–ü—Ä–æ—Ç–∏–≤–æ–±—É–∫—Å–æ–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (TCS)',
            '020': '–ë–æ–∫–æ–≤—ã–µ –ø–æ–¥—É—à–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            '021': '–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ —Å–∏–¥–µ–Ω–∏–π (–≤–æ–¥–∏—Ç–µ–ª—å, –ø–∞—Å—Å–∞–∂–∏—Ä)',
            '022': '–ü–æ–¥–æ–≥—Ä–µ–≤ —Å–∏–¥–µ–Ω–∏–π (–ø–µ—Ä–µ–¥–Ω–∏–µ, –∑–∞–¥–Ω–∏–µ)',
            '023': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
            '024': '–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ —Å–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –∑–µ—Ä–∫–∞–ª',
            '026': '–ü–æ–¥—É—à–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–≤–æ–¥–∏—Ç–µ–ª—å, –ø–∞—Å—Å–∞–∂–∏—Ä)',
            '027': '–ü–æ–¥—É—à–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–≤–æ–¥–∏—Ç–µ–ª—å, –ø–∞—Å—Å–∞–∂–∏—Ä)',
            '029': '–§–∞—Ä—ã (HID, LED)',
            '030': '–≠–ª–µ–∫—Ç—Ä–æ—Ö—Ä–æ–º–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ –∑–∞–¥–Ω–µ–≥–æ –≤–∏–¥–∞',
            '031': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä—É–ª–µ',
            '032': '–ü–∞—Ä–∫—Ç—Ä–æ–Ω–∏–∫ (–ø–µ—Ä–µ–¥–Ω–∏–π, –∑–∞–¥–Ω–∏–π)',
            '033': '–î–∞—Ç—á–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è –≤ —à–∏–Ω–∞—Ö (TPMS)',
            '034': '–í–µ–Ω—Ç–∏–ª–∏—Ä—É–µ–º—ã–µ —Å–∏–¥–µ–Ω—å—è (–≤–æ–¥–∏—Ç–µ–ª—å, –ø–∞—Å—Å–∞–∂–∏—Ä)',
            '035': '–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ —Å–∏–¥–µ–Ω–∏–π (–≤–æ–¥–∏—Ç–µ–ª—å, –ø–∞—Å—Å–∞–∂–∏—Ä)',
            '051': '–ü–∞–º—è—Ç—å —Å–∏–¥–µ–Ω–∏–π (–≤–æ–¥–∏—Ç–µ–ª—å, –ø–∞—Å—Å–∞–∂–∏—Ä)',
            '054': 'AV-–º–æ–Ω–∏—Ç–æ—Ä –∑–∞–¥–Ω–∏—Ö —Å–∏–¥–µ–Ω–∏–π',
            '055': '–°–∏—Å—Ç–µ–º–∞ –∫—É—Ä—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ (ESC)',
            '056': '–®—Ç–æ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            '057': '–°–º–∞—Ä—Ç-–∫–ª—é—á',
            '058': '–ö–∞–º–µ—Ä–∞ –∑–∞–¥–Ω–µ–≥–æ –≤–∏–¥–∞',
            '059': '–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ –±–∞–≥–∞–∂–Ω–∏–∫–∞',
            '062': '–†–µ–π–ª–∏–Ω–≥–∏ –Ω–∞ –∫—Ä—ã—à–µ',
            '063': '–ü–æ–¥–æ–≥—Ä–µ–≤ —Å–∏–¥–µ–Ω–∏–π (–ø–µ—Ä–µ–¥–Ω–∏–µ, –∑–∞–¥–Ω–∏–µ)',
            '068': '–ö—Ä—É–∏–∑-–∫–æ–Ω—Ç—Ä–æ–ª—å (–æ–±—ã—á–Ω—ã–π, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)',
            '071': 'AUX-—Ä–∞–∑—ä–µ–º',
            '072': 'USB-—Ä–∞–∑—ä–µ–º',
            '074': '–¢—Ä–∞–Ω—Å–ø–æ–Ω–¥–µ—Ä –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –¥–æ—Ä–æ–≥',
            '075': '–§–∞—Ä—ã (HID, LED)',
            '077': '–í–µ–Ω—Ç–∏–ª–∏—Ä—É–µ–º—ã–µ —Å–∏–¥–µ–Ω—å—è (–≤–æ–¥–∏—Ç–µ–ª—å, –ø–∞—Å—Å–∞–∂–∏—Ä)',
            '078': '–ü–∞–º—è—Ç—å —Å–∏–¥–µ–Ω–∏–π (–≤–æ–¥–∏—Ç–µ–ª—å, –ø–∞—Å—Å–∞–∂–∏—Ä)',
            '079': '–ö—Ä—É–∏–∑-–∫–æ–Ω—Ç—Ä–æ–ª—å (–æ–±—ã—á–Ω—ã–π, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)',
            '080': '–°–∏—Å—Ç–µ–º–∞ –º—è–≥–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–µ–π',
            '081': '–î–∞—Ç—á–∏–∫ –¥–æ–∂–¥—è',
            '082': '–ü–æ–¥–æ–≥—Ä–µ–≤ —Ä—É–ª—è',
            '083': '–≠–ª–µ–∫—Ç—Ä–æ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Ä—É–ª—è',
            '084': '–ü–æ–¥—Ä—É–ª–µ–≤—ã–µ –ª–µ–ø–µ—Å—Ç–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á',
            '085': '–ü–∞—Ä–∫—Ç—Ä–æ–Ω–∏–∫ (–ø–µ—Ä–µ–¥–Ω–∏–π, –∑–∞–¥–Ω–∏–π)',
            '086': '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–æ–∫–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö',
            '087': '–ö–∞–º–µ—Ä–∞ 360 –≥—Ä–∞–¥—É—Å–æ–≤',
            '088': '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ø–æ–ª–æ—Å—ã (LDWS)',
            '089': '–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ —Å–∏–¥–µ–Ω–∏–π (–∑–∞–¥–Ω–∏–µ)',
            '090': '–í–µ–Ω—Ç–∏–ª–∏—Ä—É–µ–º—ã–µ —Å–∏–¥–µ–Ω—å—è (–∑–∞–¥–Ω–∏–µ)',
            '091': '–ú–∞—Å—Å–∞–∂–Ω—ã–µ —Å–∏–¥–µ–Ω—å—è',
            '092': '–®—Ç–æ—Ä—ã/–∂–∞–ª—é–∑–∏ (–∑–∞–¥–Ω–∏–µ —Å–∏–¥–µ–Ω—å—è, –∑–∞–¥–Ω–µ–µ —Å—Ç–µ–∫–ª–æ)',
            '093': '–®—Ç–æ—Ä—ã/–∂–∞–ª—é–∑–∏ (–∑–∞–¥–Ω–∏–µ —Å–∏–¥–µ–Ω—å—è, –∑–∞–¥–Ω–µ–µ —Å—Ç–µ–∫–ª–æ)',
            '094': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å—Ç–æ—è–Ω–æ—á–Ω—ã–π —Ç–æ—Ä–º–æ–∑ (EPB)',
            '095': '–ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Å–ø–ª–µ–π (HUD)',
            '096': 'Bluetooth',
            '097': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ'
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            await this.loadCarDetails();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è —á–µ—Ä–µ–∑ GET
     */
    async loadCarDetails() {
        try {
            const response = await this.apiService.getCarDetails(this.carId);
            
            if (response.status === 'success' && response.data) {
                this.carData = response.data;
                await this.processCarData();
                this.render();
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
            }
        } catch (error) {
            console.error('Error loading car details:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    async processCarData() {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const urlPrice = this.getUrlPrice();
        const urlPhotos = this.getUrlPhotos();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç URL -> API)
        this.carData.currentPrice = urlPrice !== null ? urlPrice : 
            (this.getSafeData('info.advertisement.price') || 0);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ç–æ
        const apiPhotos = this.getSafeData('info.photos', []);
        this.carData.mergedPhotos = this.mergePhotos(urlPhotos, apiPhotos);

        // üîß –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –î–õ–Ø –ó–ê–ú–ï–ù–ï–ù–ù–´–• –î–ï–¢–ê–õ–ï–ô
        const outers = this.getSafeData('checkup.outers', []);
       
        if (outers && Array.isArray(outers)) {
            outers.forEach((outer, index) => {
                
                if (outer.statusTypes && Array.isArray(outer.statusTypes)) {
                    outer.statusTypes.forEach((status, statusIndex) => {
                    });
                } else {
                }
            });
            
            // –ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
            const replacedParts = this.getReplacedParts(outers);

        } else {
            console.log('No outers data or not an array');
        }

        // –û—á–∏—â–∞–µ–º sessionStorage
        this.cleanupSessionStorage();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    getUrlPrice() {
        const urlParams = new URLSearchParams(window.location.search);
        const price = urlParams.get('price');
        return price ? parseInt(price) : null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    getUrlPhotos() {
        const urlParams = new URLSearchParams(window.location.search);
        const photosJson = urlParams.get('photos');
        try {
            return photosJson ? JSON.parse(photosJson) : [];
        } catch (e) {
            console.warn('Error parsing photos from URL:', e);
            return [];
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    render() {
        const content = document.getElementById('carContent');
        const fragment = document.createDocumentFragment();
        
        const row = SafeDOM.createElement('div', { class: 'row' });

        // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        const leftCol = SafeDOM.createElement('div', { class: 'col-lg-8' });
        leftCol.appendChild(this.createPhotoGallery());
        leftCol.appendChild(this.createMainInfo());
        leftCol.appendChild(this.createInsuranceAndInspection());

        // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        const rightCol = SafeDOM.createElement('div', { class: 'col-lg-4' });
        rightCol.appendChild(this.createPriceInfo());
        rightCol.appendChild(this.createContactInfo());
        rightCol.appendChild(this.createOwnershipHistory());
        rightCol.appendChild(this.createEquipment());

        row.appendChild(leftCol);
        row.appendChild(rightCol);
        fragment.appendChild(row);

        SafeDOM.render(content, fragment);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
        setTimeout(() => this.loadCarPhotos(), 100);
    }

    /**
     * –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ
     */
    createPhotoGallery() {
        const card = SafeDOM.createElement('div', { class: 'card mb-4' });
        const cardBody = SafeDOM.createElement('div', { class: 'card-body' });

        const title = SafeDOM.createElement('h5', { class: 'card-title' }, 'üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
        cardBody.appendChild(title);

        const gallery = SafeDOM.createElement('div', { 
            id: 'carGallery',
            class: 'row g-2' 
        });

        // –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–ª—è —Ñ–æ—Ç–æ
        for (let i = 0; i < 8; i++) {
            const col = SafeDOM.createElement('div', { 
                class: 'col-6 col-md-4 col-lg-3' 
            });

            const ratio = SafeDOM.createElement('div', { class: 'ratio ratio-1x1' });
            const placeholder = SafeDOM.createElement('div', { 
                class: 'photo-placeholder loading-photo rounded' 
            });

            ratio.appendChild(placeholder);
            col.appendChild(ratio);
            gallery.appendChild(col);
        }

        cardBody.appendChild(gallery);
        card.appendChild(cardBody);

        return card;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    createMainInfo() {
        const card = SafeDOM.createElement('div', { class: 'card mb-4' });
        const cardHeader = SafeDOM.createElement('div', { 
            class: 'card-header bg-primary-custom text-white' 
        });
        cardHeader.appendChild(SafeDOM.createElement('h5', { class: 'mb-0' }, 'üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'));
        
        const cardBody = SafeDOM.createElement('div', { class: 'card-body' });
        cardBody.appendChild(this.createSpecificationsGrid());
        
        card.appendChild(cardHeader);
        card.appendChild(cardBody);
        return card;
    }

    /**
     * –°–µ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
     */
    createSpecificationsGrid() {
        const grid = SafeDOM.createElement('div', { class: 'car-specs-grid' });
        
        const specs = this.getCarSpecifications();
        specs.forEach(spec => {
            const item = SafeDOM.createElement('div', { class: 'spec-item' });
            item.appendChild(SafeDOM.createElement('div', { class: 'spec-label' }, spec.label));
            item.appendChild(SafeDOM.createElement('div', { class: 'spec-value' }, spec.value));
            grid.appendChild(item);
        });
        
        return grid;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    getCarSpecifications() {
        const info = this.getSafeData('info', {});
        const category = this.getSafeData('info.category', {});
        const spec = this.getSafeData('info.spec', {});

        return [
            { label: 'üöó –ú–æ–¥–µ–ª—å', value: this.getCarTitle() },
            { label: 'üÜî ID', value: info.vehicleId || '‚Äî' },
            { label: 'üî¢ –ù–æ–º–µ—Ä', value: this.findLicensePlate() },
            { label: 'üîê VIN', value: this.findVin() },
            { label: 'üé® –¶–≤–µ—Ç', value: spec.colorName || '‚Äî' },
            { label: '‚õΩ –¢–æ–ø–ª–∏–≤–æ', value: spec.fuelName || '‚Äî' },
            { label: 'üìè –ü—Ä–æ–±–µ–≥', value: spec.mileage ? `${spec.mileage.toLocaleString()} –∫–º` : '‚Äî' },
            { label: '‚öô –ö–æ—Ä–æ–±–∫–∞', value: spec.transmissionName || '‚Äî' },
            { label: 'üìÖ –ì–æ–¥', value: category.formYear || '‚Äî' },
            { label: 'üö™ –ö—É–∑–æ–≤', value: spec.bodyName || '‚Äî' },
            { label: 'üîß –û–±—ä–µ–º', value: spec.displacement ? `${spec.displacement} cc` : '‚Äî' },
            { label: 'üí∫ –ú–µ—Å—Ç', value: spec.seatCount || '‚Äî' }
        ];
    }

    /**
     * –°—Ç—Ä–∞—Ö–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
     */
    createInsuranceAndInspection() {
        const card = SafeDOM.createElement('div', { class: 'card mb-4' });
        const cardHeader = SafeDOM.createElement('div', { 
            class: 'card-header bg-light' 
        });
        cardHeader.appendChild(SafeDOM.createElement('h5', { class: 'mb-0' }, 'üìä –ò—Å—Ç–æ—Ä–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'));
        
        const cardBody = SafeDOM.createElement('div', { class: 'card-body' });

        // –°—Ç—Ä–∞—Ö–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è
        const insuranceSection = SafeDOM.createElement('div', { class: 'mb-4' });
        insuranceSection.appendChild(this.createInsuranceSummary());
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –î–¢–ü
        const accidentDetailsContainer = SafeDOM.createElement('div', {
            class: 'accident-details',
            id: 'accidentDetails',
            style: 'display: none;'
        });
        insuranceSection.appendChild(accidentDetailsContainer);
        
        cardBody.appendChild(insuranceSection);

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        const inspectionSection = SafeDOM.createElement('div', {});
        inspectionSection.appendChild(this.createInspectionSummary());
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const inspectionDetailsContainer = SafeDOM.createElement('div', {
            class: 'inspection-details',
            id: 'inspectionDetails',
            style: 'display: none;'
        });
        inspectionSection.appendChild(inspectionDetailsContainer);
        
        cardBody.appendChild(inspectionSection);

        card.appendChild(cardHeader);
        card.appendChild(cardBody);
        return card;
    }

    /**
     * –°–≤–æ–¥–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏
     */
    createInsuranceSummary() {
        const container = SafeDOM.createElement('div', {});
        
        const header = SafeDOM.createElement('div', {
            class: 'd-flex justify-content-between align-items-center mb-2 clickable-item'
        });
        header.addEventListener('click', () => this.toggleAccidentDetails());

        const title = SafeDOM.createElement('h6', { class: 'text-dark mb-0' }, 'üìà –°—Ç—Ä–∞—Ö–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è');
        header.appendChild(title);

        const accidentCnt = this.getSafeData('open_data.accidentCnt', 0);
        const badgeClass = accidentCnt > 0 ? 'bg-warning' : 'bg-success';
        const badge = SafeDOM.createElement('span', {
            class: `badge accident-badge ${badgeClass}`
        }, `${accidentCnt} –î–¢–ü`);
        header.appendChild(badge);

        container.appendChild(header);
        container.appendChild(this.createAccidentSummary());
        
        return container;
    }

    /**
     * –°–≤–æ–¥–∫–∞ –î–¢–ü
     */
    createAccidentSummary() {
        const openData = this.getSafeData('open_data', {});
        const myAccidentCnt = this.getSafeData('open_data.myAccidentCnt', 0);
        const otherAccidentCnt = this.getSafeData('open_data.otherAccidentCnt', 0);
        const totalCost = (this.getSafeData('open_data.myAccidentCost', 0) + 
                          this.getSafeData('open_data.otherAccidentCost', 0)) * CurrencyService.getExchangeRate();

        const summary = SafeDOM.createElement('div', { class: 'accident-summary' });
        
        const row = SafeDOM.createElement('div', { class: 'row small text-center' });

        // –î–¢–ü –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const col1 = SafeDOM.createElement('div', { class: 'col-4' });
        col1.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, 'üë§ –î–¢–ü –≤–ª–∞–¥–µ–ª—å—Ü–∞'));
        col1.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, myAccidentCnt.toString()));
        row.appendChild(col1);

        // –î–¢–ü –¥—Ä—É–≥–∏—Ö
        const col2 = SafeDOM.createElement('div', { class: 'col-4' });
        col2.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, 'üë• –î–¢–ü –¥—Ä—É–≥–∏—Ö'));
        col2.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, otherAccidentCnt.toString()));
        row.appendChild(col2);

        // –û–±—â–∞—è —Å—É–º–º–∞
        const col3 = SafeDOM.createElement('div', { class: 'col-4' });
        col3.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, 'üí∞ –û–±—â–∞—è —Å—É–º–º–∞'));
        const costText = totalCost > 0 ? Math.round(totalCost).toLocaleString() + ' ‚ÇΩ' : '‚Äî';
        col3.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, costText));
        row.appendChild(col3);

        summary.appendChild(row);
        return summary;
    }

    /**
     * –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏
     */
    createAccidentDetails() {
        const openData = this.getSafeData('open_data', {});
        const accidents = this.getSafeData('open_data.accidents', []);
        
        const container = SafeDOM.createElement('div', { class: 'mt-3' });
        
        const alert = SafeDOM.createElement('div', { 
            class: 'alert alert-info small mb-3' 
        });
        alert.appendChild(SafeDOM.createElement('strong', {}, 'üìã –í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –î–¢–ü'));
        container.appendChild(alert);
        
        if (accidents.length > 0) {
            accidents.forEach((acc, index) => {
                const accidentItem = this.createAccidentItem(acc, index);
                container.appendChild(accidentItem);
            });
        } else {
            container.appendChild(SafeDOM.createElement('div', { 
                class: 'text-muted small' 
            }, '–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –î–¢–ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
        }
        
        return container;
    }

    /**
     * –≠–ª–µ–º–µ–Ω—Ç –î–¢–ü
     */
    createAccidentItem(acc, index) {
        const accidentType = acc.type === '2' ? 'üë§ –í–ª–∞–¥–µ–ª–µ—Ü' : 
                          acc.type === '3' ? 'üë• –¢—Ä–µ—Ç—å–µ –ª–∏—Ü–æ' : 
                          '‚ùì –¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω';
        
        const insuranceBenefit = acc.insuranceBenefit ? 
            Math.round(acc.insuranceBenefit * CurrencyService.getExchangeRate()).toLocaleString() : null;
        
        const item = SafeDOM.createElement('div', { class: 'small border-bottom py-2' });
        
        const header = SafeDOM.createElement('div', { class: 'fw-bold' }, `–î–¢–ü ${index + 1} (${accidentType})`);
        item.appendChild(header);
        
        const date = SafeDOM.createElement('div', {}, `üìÖ –î–∞—Ç–∞: ${acc.date || '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}`);
        item.appendChild(date);
        
        if (insuranceBenefit) {
            const benefit = SafeDOM.createElement('div', {}, 
                `üíµ –°—Ç—Ä–∞—Ö–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞: ${insuranceBenefit} ‚ÇΩ (${acc.insuranceBenefit.toLocaleString()} ‚Ç©)`);
            item.appendChild(benefit);
        }
        
        if (acc.partCost) {
            const partCost = SafeDOM.createElement('div', {}, 
                `üîß –ó–∞–ø—á–∞—Å—Ç–∏: ${Math.round(acc.partCost * CurrencyService.getExchangeRate()).toLocaleString()} ‚ÇΩ (${acc.partCost.toLocaleString()} ‚Ç©)`);
            item.appendChild(partCost);
        }
        
        if (acc.laborCost) {
            const laborCost = SafeDOM.createElement('div', {}, 
                `üë∑ –†–∞–±–æ—Ç–∞: ${Math.round(acc.laborCost * CurrencyService.getExchangeRate()).toLocaleString()} ‚ÇΩ (${acc.laborCost.toLocaleString()} ‚Ç©)`);
            item.appendChild(laborCost);
        }
        
        if (acc.paintingCost) {
            const paintingCost = SafeDOM.createElement('div', {}, 
                `üé® –ü–æ–∫—Ä–∞—Å–∫–∞: ${Math.round(acc.paintingCost * CurrencyService.getExchangeRate()).toLocaleString()} ‚ÇΩ (${acc.paintingCost.toLocaleString()} ‚Ç©)`);
            item.appendChild(paintingCost);
        }
        
        return item;
    }

    /**
     * –°–≤–æ–¥–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
     */
    createInspectionSummary() {
        const container = SafeDOM.createElement('div', {});
        
        const header = SafeDOM.createElement('div', {
            class: 'd-flex justify-content-between align-items-center mb-2 clickable-item'
        });
        header.addEventListener('click', () => this.toggleInspectionDetails());

        const title = SafeDOM.createElement('h6', { class: 'text-dark mb-0' }, 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
        header.appendChild(title);

        const badge = SafeDOM.createElement('span', {
            class: 'badge inspection-badge bg-info'
        }, '–î–µ—Ç–∞–ª–∏');
        header.appendChild(badge);

        container.appendChild(header);
        container.appendChild(this.createInspectionDetailsSummary());
        
        return container;
    }

    /**
     * –î–µ—Ç–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Å–≤–æ–¥–∫–∞)
     */
    createInspectionDetailsSummary() {
        const masterDetail = this.getSafeData('checkup.master.detail', {});
        const carState = this.getSafeData('checkup.master.detail.carStateType.title', '‚Äî');
        const boardState = this.getSafeData('checkup.master.detail.boardStateType.title', '‚Äî');

        const summary = SafeDOM.createElement('div', { class: 'inspection-summary' });
        
        const row = SafeDOM.createElement('div', { class: 'row small' });

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        const col1 = SafeDOM.createElement('div', { class: 'col-6' });
        col1.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è'));
        col1.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, carState));
        row.appendChild(col1);

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–∑–æ–≤–∞
        const col2 = SafeDOM.createElement('div', { class: 'col-6' });
        col2.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–∑–æ–≤–∞'));
        col2.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, boardState));
        row.appendChild(col2);

        summary.appendChild(row);
        return summary;
    }

    /**
     * –î–µ—Ç–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
     */
    createInspectionDetails() {
        const checkup = this.getSafeData('checkup', {});
        const master = this.getSafeData('checkup.master', null);
        const masterDetail = master ? this.getSafeData('checkup.master.detail', {}) : {};
        
        const container = SafeDOM.createElement('div', { class: 'mt-3' });
        
        if (masterDetail && masterDetail.vin) {
            const detailsGrid = SafeDOM.createElement('div', { class: 'mb-3' });
            
            const row = SafeDOM.createElement('div', { class: 'row small' });
            
            // –ì–∞—Ä–∞–Ω—Ç–∏—è
            const guarantyCol = SafeDOM.createElement('div', { class: 'col-6' });
            guarantyCol.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, '–ì–∞—Ä–∞–Ω—Ç–∏—è'));
            guarantyCol.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
                this.getSafeData('checkup.master.detail.guarantyType.title', '‚Äî')));
            row.appendChild(guarantyCol);
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç
            const inspectorCol = SafeDOM.createElement('div', { class: 'col-6' });
            inspectorCol.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, '–î–∏–∞–≥–Ω–æ—Å—Ç'));
            inspectorCol.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
                masterDetail.inspName || '‚Äî'));
            row.appendChild(inspectorCol);
            
            // –¢—é–Ω–∏–Ω–≥
            const tuningCol = SafeDOM.createElement('div', { class: 'col-6' });
            tuningCol.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, '–¢—é–Ω–∏–Ω–≥'));
            tuningCol.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
                masterDetail.tuning ? '–î–∞' : '–ù–µ—Ç'));
            row.appendChild(tuningCol);
            
            // –ü—Ä–æ–±–µ–≥
            const mileageCol = SafeDOM.createElement('div', { class: 'col-6' });
            mileageCol.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, '–ü—Ä–æ–±–µ–≥'));
            mileageCol.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
                masterDetail.mileage ? masterDetail.mileage.toLocaleString() + ' –∫–º' : '‚Äî'));
            row.appendChild(mileageCol);
            
            // –î–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            const dateCol = SafeDOM.createElement('div', { class: 'col-12' });
            dateCol.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, '–î–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'));
            dateCol.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
                masterDetail.issueDate ? this.formatDate(masterDetail.issueDate) : '‚Äî'));
            row.appendChild(dateCol);
            
            detailsGrid.appendChild(row);
            container.appendChild(detailsGrid);
        } else if (master) {
            const alert = SafeDOM.createElement('div', { class: 'alert alert-info small mb-3' }, 
                '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞, –Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            container.appendChild(alert);
        } else {
            const alert = SafeDOM.createElement('div', { class: 'alert alert-warning small mb-3' }, 
                '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å');
            container.appendChild(alert);
        }
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        const replacedPartsSection = this.createSimpleReplacedPartsSection();
        container.appendChild(replacedPartsSection);
        
        return container;
    }

    /**
     * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
     */
    createSimpleReplacedPartsSection() {
        const outers = this.getSafeData('checkup.outers', []);
        
        const container = SafeDOM.createElement('div', { class: 'mb-3' });
        const title = SafeDOM.createElement('strong', { class: 'd-block mb-2' }, 'üõ† –ó–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:');
        container.appendChild(title);
        
        if (!outers || !Array.isArray(outers) || outers.length === 0) {
            container.appendChild(SafeDOM.createElement('div', { 
                class: 'text-muted small' 
            }, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ç–∞–ª—è—Ö'));
            return container;
        }
        
        let replacedCount = 0;
        
        outers.forEach((outer, index) => {
            
            if (outer && outer.statusTypes && Array.isArray(outer.statusTypes)) {
                const hasReplacement = outer.statusTypes.some(st => {
                    if (!st) return false;
                    const isReplaced = st.code === 'X' || (st.title && st.title.includes('Exchange'));
                    return isReplaced;
                });
                
                if (hasReplacement) {
                    replacedCount++;
                    const partName = outer.type?.title || `–î–µ—Ç–∞–ª—å ${index + 1}`;
                    
                    const partItem = SafeDOM.createElement('div', { 
                        class: 'small border-bottom py-2' 
                    });
                    partItem.appendChild(SafeDOM.createText(partName));
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (outer.statusTypes[0]?.title && outer.statusTypes[0].title !== 'Exchange (replacement)') {
                        const statusBadge = SafeDOM.createElement('span', { 
                            class: 'badge bg-secondary ms-2' 
                        }, outer.statusTypes[0].title);
                        partItem.appendChild(statusBadge);
                    }
                    
                    container.appendChild(partItem);
                }
            }
        });
        
        if (replacedCount === 0) {
            container.appendChild(SafeDOM.createElement('div', { 
                class: 'text-muted small' 
            }, '‚úÖ –ù–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π'));
        } else {
            const counter = SafeDOM.createElement('div', { 
                class: 'text-muted small mt-2' 
            }, `–í—Å–µ–≥–æ –∑–∞–º–µ–Ω–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π: ${replacedCount}`);
            container.appendChild(counter);
        }

        return container;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (—Å—Ç–∞—Ç—É—Å "Exchange")
     */
    getReplacedParts(outers) {
        if (!outers || !Array.isArray(outers)) {
            console.warn('getReplacedParts: Outers is not array or empty:', outers);
            return [];
        }
        
        const replaced = outers
            .filter(outer => {
                if (!outer) {
                    return false;
                }
                
                const statusTypes = outer.statusTypes;
                
                if (!statusTypes || !Array.isArray(statusTypes)) {
                    return false;
                }
                
                const hasReplacement = statusTypes.some(st => {
                    if (!st) {
                        return false;
                    }
                    
                    const isReplaced = st.code === 'X' || st.title === 'Exchange (replacement)';
                    return isReplaced;
                });
                
                return hasReplacement;
            })
            .map(outer => {
                const type = outer.type?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–µ—Ç–∞–ª—å';
                const status = outer.statusTypes?.[0]?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
                const result = { type, status };
                return result;
            });
        
        return replaced;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateStr) {
        if (!dateStr || dateStr.length !== 8) return '‚Äî';
        return `${dateStr.slice(0,4)}-${dateStr.slice(4,6)}-${dateStr.slice(6,8)}`;
    }

    /**
     * –¶–µ–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    createPriceInfo() {
        const card = SafeDOM.createElement('div', { class: 'card mb-4' });
        const cardBody = SafeDOM.createElement('div', { class: 'card-body' });

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ü–µ–Ω–æ–π
        const priceRub = CurrencyService.convertToRub(this.carData.currentPrice);
        const priceTitle = SafeDOM.createElement('h4', { 
            class: 'card-title text-dark mb-3' 
        }, priceRub ? `${priceRub.toLocaleString()} —Ç—ã—Å.‚ÇΩ` : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
        
        cardBody.appendChild(priceTitle);
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω
        const priceComparison = this.createPriceComparison();
        if (priceComparison) {
            cardBody.appendChild(priceComparison);
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ
        cardBody.appendChild(this.createPriceDetails());
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        cardBody.appendChild(this.createActionButtons());

        card.appendChild(cardBody);
        return card;
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–Ω–æ–≤–∞—è vs —Ç–µ–∫—É—â–∞—è)
     */
    createPriceComparison() {
        const advertisement = this.getSafeData('info.advertisement', {});
        const category = this.getSafeData('info.category', {});
        
        const currentPrice = this.carData.currentPrice || advertisement.price || 0;
        const originalPrice = category.originPrice;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å originalPrice –∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if (originalPrice && originalPrice > 0 && currentPrice > 0 && currentPrice < originalPrice) {
            const priceReduction = originalPrice - currentPrice;
            const percentOfNew = Math.round((currentPrice / originalPrice) * 100);
            const savingsPercent = 100 - percentOfNew;
            
            const originalPriceInRub = CurrencyService.convertToRub(originalPrice);
            const reductionInRub = CurrencyService.convertToRub(priceReduction);

            const alert = SafeDOM.createElement('div', { class: 'alert alert-success mb-3' });
            
            const headerRow = SafeDOM.createElement('div', {
                class: 'd-flex justify-content-between align-items-center'
            });
            
            const leftCol = SafeDOM.createElement('div', {});
            leftCol.appendChild(SafeDOM.createElement('strong', {}, `üí∞ –≠–∫–æ–Ω–æ–º–∏—è ${savingsPercent}%`));
            leftCol.appendChild(SafeDOM.createElement('div', { class: 'small' }, '–æ—Ç —Ü–µ–Ω—ã –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è'));
            
            const rightCol = SafeDOM.createElement('div', { class: 'text-end' });
            rightCol.appendChild(SafeDOM.createElement('div', { 
                class: 'text-muted small' 
            }, `–ù–æ–≤—ã–π: ${originalPriceInRub ? originalPriceInRub.toLocaleString() + ' —Ç—ã—Å.‚ÇΩ' : '‚Äî'}`));
            rightCol.appendChild(SafeDOM.createElement('div', { 
                class: 'text-success small' 
            }, `–í—ã–≥–æ–¥–∞: ${reductionInRub ? reductionInRub.toLocaleString() + ' —Ç—ã—Å.‚ÇΩ' : '‚Äî'}`));
            
            headerRow.appendChild(leftCol);
            headerRow.appendChild(rightCol);
            alert.appendChild(headerRow);

            // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            const progressContainer = SafeDOM.createElement('div', { class: 'progress mt-2' });
            progressContainer.style.height = '8px';
            const progressBar = SafeDOM.createElement('div', {
                class: 'progress-bar bg-success',
                style: `width: ${percentOfNew}%`
            });
            progressContainer.appendChild(progressBar);
            alert.appendChild(progressContainer);

            const progressText = SafeDOM.createElement('div', {
                class: 'small text-muted text-center mt-1'
            }, `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ‚Üí ${percentOfNew}% –æ—Ç –Ω–æ–≤–æ–π`);
            alert.appendChild(progressText);

            return alert;
        }
        
        // –ï—Å–ª–∏ originalPrice –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
        if (!originalPrice || originalPrice <= 0) {
            const currentPriceInRub = CurrencyService.convertToRub(currentPrice);
            
            const alert = SafeDOM.createElement('div', { class: 'alert alert-info mb-3' });
            
            const headerRow = SafeDOM.createElement('div', {
                class: 'd-flex justify-content-between align-items-center'
            });
            
            const leftCol = SafeDOM.createElement('div', {});
            leftCol.appendChild(SafeDOM.createElement('strong', {}, '‚ÑπÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º'));
            leftCol.appendChild(SafeDOM.createElement('div', { class: 'small' }, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
            
            const rightCol = SafeDOM.createElement('div', { class: 'text-end' });
            rightCol.appendChild(SafeDOM.createElement('div', { 
                class: 'text-dark small' 
            }, `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPriceInRub ? currentPriceInRub.toLocaleString() + ' —Ç—ã—Å.‚ÇΩ' : '‚Äî'}`));
            
            headerRow.appendChild(leftCol);
            headerRow.appendChild(rightCol);
            alert.appendChild(headerRow);

            return alert;
        }
        
        return null;
    }

    /**
     * –î–µ—Ç–∞–ª–∏ —Ü–µ–Ω—ã
     */
    createPriceDetails() {
        const advertisement = this.getSafeData('info.advertisement', {});
        const category = this.getSafeData('info.category', {});
        
        const currentPrice = this.carData.currentPrice || advertisement.price || 0;
        const originalPrice = category.originPrice; // –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º currentPrice!
        
        const priceInRub = CurrencyService.convertToRub(currentPrice);
        const originalPriceInRub = CurrencyService.convertToRub(originalPrice);

        const container = SafeDOM.createElement('div', { class: 'price-section mb-3' });

        // –¶–µ–Ω–∞ –≤ –≤–æ–Ω–∞—Ö
        const wonPrice = SafeDOM.createElement('h2', { 
            class: 'price-tag mb-1' 
        }, currentPrice ? `${(currentPrice * 10000).toLocaleString()} ‚Ç©` : '‚Äî');
        container.appendChild(wonPrice);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å originalPrice
        if (originalPrice && originalPrice !== currentPrice) {
            const priceReduction = originalPrice - currentPrice;
            const reductionText = SafeDOM.createElement('div', { class: 'text-success small' });
            reductionText.appendChild(SafeDOM.createText(`üìâ –°–Ω–∏–∂–µ–Ω–∞ –Ω–∞ ${(priceReduction * 10000).toLocaleString()} ‚Ç© `));
            
            const rubReduction = CurrencyService.convertToRub(priceReduction);
            if (rubReduction) {
                reductionText.appendChild(SafeDOM.createText(`(~${rubReduction.toLocaleString()} —Ç—ã—Å.‚ÇΩ)`));
            }
            container.appendChild(reductionText);

            const originalText = SafeDOM.createElement('div', { class: 'text-muted small' });
            originalText.appendChild(SafeDOM.createText(`–ë—ã–ª–∞: ${(originalPrice * 10000).toLocaleString()} ‚Ç© `));
            
            if (originalPriceInRub) {
                originalText.appendChild(SafeDOM.createText(`(~${originalPriceInRub.toLocaleString()} —Ç—ã—Å.‚ÇΩ)`));
            }
            container.appendChild(originalText);
        }

        // –ë–ª–æ–∫ —Å —Ü–∏—Ñ—Ä–∞–º–∏
        const numbersContainer = SafeDOM.createElement('div', {
            class: 'mb-3 p-3 bg-light rounded'
        });
        
        const numbersRow = SafeDOM.createElement('div', { class: 'row text-center small' });
        
        // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        const currentCol = SafeDOM.createElement('div', { 
            class: originalPrice ? 'col-6' : 'col-12' 
        });
        currentCol.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, 'üéØ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞'));
        currentCol.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
            priceInRub ? `${priceInRub.toLocaleString()} —Ç—ã—Å.‚ÇΩ` : '‚Äî'));
        numbersRow.appendChild(currentCol);

        // –¶–µ–Ω–∞ –Ω–æ–≤–æ–≥–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å originalPrice
        if (originalPrice) {
            const originalCol = SafeDOM.createElement('div', { class: 'col-6' });
            originalCol.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, 'üÜï –¶–µ–Ω–∞ –Ω–æ–≤–æ–≥–æ'));
            originalCol.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
                originalPriceInRub ? `${originalPriceInRub.toLocaleString()} —Ç—ã—Å.‚ÇΩ` : '‚Äî'));
            numbersRow.appendChild(originalCol);
        }

        numbersContainer.appendChild(numbersRow);
        container.appendChild(numbersContainer);

        return container;
    }

    /**
     * –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
     */
    createActionButtons() {
        const container = SafeDOM.createElement('div', { class: 'd-grid gap-2 btn-group-mobile' });

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞ —Å–∞–π—Ç–µ Encar"
        const encarLink = SafeDOM.createLink(
            'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Encar',
            `https://fem.encar.com/cars/detail/${this.carId}`,
            null,
            'btn btn-primary-custom',
            { target: '_blank', rel: 'noopener noreferrer' }
        );
        container.appendChild(encarLink);

        // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç –æ—Å–º–æ—Ç—Ä–∞"
        const hasInspection = this.getSafeData('checkup.master') !== null;
        if (hasInspection) {
            const inspectionButton = SafeDOM.createButton(
                'üìã –ê–∫—Ç –æ—Å–º–æ—Ç—Ä–∞',
                () => this.generateInspectionReport(),
                'btn btn-outline-primary-custom'
            );
            container.appendChild(inspectionButton);
        } else {
            const noInspection = SafeDOM.createElement('div', { 
                class: 'text-muted text-center py-2' 
            }, 'üîç –û—Å–º–æ—Ç—Ä –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è');
            container.appendChild(noInspection);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        const backButton = SafeDOM.createButton(
            '‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É',
            () => window.history.back(),
            'btn btn-outline-secondary'
        );
        container.appendChild(backButton);

        return container;
    }

    /**
     * –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    createContactInfo() {
        const contact = this.getSafeData('info.contact', {});
        const partnership = this.getSafeData('info.partnership', {});
        
        if (!contact || !contact.userType) {
            const card = SafeDOM.createElement('div', { class: 'card mb-4' });
            const cardBody = SafeDOM.createElement('div', { class: 'card-body' });
            cardBody.appendChild(SafeDOM.createElement('p', { class: 'text-muted' }, '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
            card.appendChild(cardBody);
            return card;
        }

        const card = SafeDOM.createElement('div', { class: 'card mb-4' });
        const cardBody = SafeDOM.createElement('div', { class: 'card-body' });
        
        const title = SafeDOM.createElement('h5', { class: 'card-title' }, 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã');
        cardBody.appendChild(title);

        const content = SafeDOM.createElement('div', { class: 'small' });

        // –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞
        const sellerType = SafeDOM.createElement('div', { class: 'mb-2' });
        sellerType.appendChild(SafeDOM.createElement('strong', {}, '–¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞:'));
        sellerType.appendChild(SafeDOM.createElement('br'));
        sellerType.appendChild(SafeDOM.createText(
            contact.userType === 'DEALER' ? 'üè¢ –î–∏–ª–µ—Ä' : 'üë§ –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
        ));
        content.appendChild(sellerType);

        // –ê–¥—Ä–µ—Å
        if (contact.address) {
            const address = SafeDOM.createElement('div', { class: 'mb-2' });
            address.appendChild(SafeDOM.createElement('strong', {}, 'üìç –ê–¥—Ä–µ—Å:'));
            address.appendChild(SafeDOM.createElement('br'));
            address.appendChild(SafeDOM.createText(contact.address));
            content.appendChild(address);
        }

        // –¢–µ–ª–µ—Ñ–æ–Ω
        if (contact.no) {
            const phone = SafeDOM.createElement('div', { class: 'mb-2' });
            phone.appendChild(SafeDOM.createElement('strong', {}, 'üìû –¢–µ–ª–µ—Ñ–æ–Ω:'));
            phone.appendChild(SafeDOM.createElement('br'));
            
            let phoneText = contact.no;
            if (contact.contactType) {
                phoneText += ` (${this.getContactType(contact.contactType)})`;
            }
            phone.appendChild(SafeDOM.createText(phoneText));
            content.appendChild(phone);
        }

        // –¢–µ–ª–µ—Ñ–æ–Ω –¥–∏–ª–µ—Ä–∞
        const dealerPhone = this.getSafeData('info.partnership.dealer.firm.telephoneNumber');
        if (dealerPhone) {
            const dealerPhoneElem = SafeDOM.createElement('div', { class: 'mb-2' });
            dealerPhoneElem.appendChild(SafeDOM.createElement('strong', {}, 'üè¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–∏–ª–µ—Ä–∞:'));
            dealerPhoneElem.appendChild(SafeDOM.createElement('br'));
            dealerPhoneElem.appendChild(SafeDOM.createText(dealerPhone));
            content.appendChild(dealerPhoneElem);
        }

        // –¶–µ–Ω—Ç—Ä—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const diagnosisCenters = this.getSafeData('info.partnership.dealer.firm.diagnosisCenters', []);
        if (diagnosisCenters.length > 0) {
            const centers = SafeDOM.createElement('div', { class: 'mb-2' });
            centers.appendChild(SafeDOM.createElement('strong', {}, 'üîß –¶–µ–Ω—Ç—Ä—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:'));
            centers.appendChild(SafeDOM.createElement('br'));
            centers.appendChild(SafeDOM.createText(
                diagnosisCenters.map(center => center.name).join(', ')
            ));
            content.appendChild(centers);
        }

        cardBody.appendChild(content);
        card.appendChild(cardBody);
        return card;
    }

    /**
     * –ò—Å—Ç–æ—Ä–∏—è –≤–ª–∞–¥–µ–Ω–∏—è
     */
    createOwnershipHistory() {
        const openData = this.getSafeData('open_data', {});
        const ownerChanges = this.getSafeData('open_data.ownerChanges', []);
        const carInfoChanges = this.getSafeData('open_data.carInfoChanges', []);
        
        if (ownerChanges.length === 0 && carInfoChanges.length === 0) {
            return SafeDOM.createText('');
        }

        const card = SafeDOM.createElement('div', { class: 'card mb-4' });
        const cardBody = SafeDOM.createElement('div', { class: 'card-body' });

        const title = SafeDOM.createElement('h6', { class: 'text-dark mb-3' }, 'üîÑ –ò—Å—Ç–æ—Ä–∏—è –≤–ª–∞–¥–µ–Ω–∏—è');
        cardBody.appendChild(title);

        // –ò—Å—Ç–æ—Ä–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        if (ownerChanges.length > 0) {
            const ownersSection = SafeDOM.createElement('div', { class: 'mb-3' });
            ownersSection.appendChild(SafeDOM.createElement('strong', {}, '–í–ª–∞–¥–µ–ª—å—Ü—ã:'));
            
            ownerChanges.forEach((date, index) => {
                const ownerItem = SafeDOM.createElement('div', { 
                    class: 'small border-bottom py-1' 
                }, `${index + 1}. ${date}`);
                ownersSection.appendChild(ownerItem);
            });
            
            cardBody.appendChild(ownersSection);
        }

        // –ò—Å—Ç–æ—Ä–∏—è –Ω–æ–º–µ—Ä–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        if (carInfoChanges.length > 0) {
            const platesSection = SafeDOM.createElement('div', { class: 'mb-3' });
            platesSection.appendChild(SafeDOM.createElement('strong', {}, 'üöò –ù–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏:'));
            
            carInfoChanges.forEach(change => {
                const plateItem = SafeDOM.createElement('div', { 
                    class: 'small border-bottom py-1' 
                }, `üìÖ ${change.date} - ${change.carNo}`);
                platesSection.appendChild(plateItem);
            });
            
            cardBody.appendChild(platesSection);
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const statsRow = SafeDOM.createElement('div', { class: 'row small text-center' });
        
        const ownerChangesCount = SafeDOM.createElement('div', { class: 'col-6' });
        ownerChangesCount.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, 'üîÑ –°–º–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤'));
        ownerChangesCount.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
            this.getSafeData('open_data.ownerChangeCnt', 0).toString()));
        statsRow.appendChild(ownerChangesCount);

        const plateChangesCount = SafeDOM.createElement('div', { class: 'col-6' });
        plateChangesCount.appendChild(SafeDOM.createElement('div', { class: 'text-muted' }, 'üöò –°–º–µ–Ω –Ω–æ–º–µ—Ä–æ–≤'));
        plateChangesCount.appendChild(SafeDOM.createElement('div', { class: 'fw-bold' }, 
            this.getSafeData('open_data.carNoChangeCnt', 0).toString()));
        statsRow.appendChild(plateChangesCount);

        cardBody.appendChild(statsRow);
        card.appendChild(cardBody);
        
        return card;
    }

    /**
     * –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
     */
    createEquipment() {
        const options = this.getSafeData('info.options', {});
        const standardOptions = this.getSafeData('info.options.standard', []);
        const choiceOptions = this.getSafeData('info.options.choice', []);
        const tuningOptions = this.getSafeData('info.options.tuning', []);
        
        if (standardOptions.length === 0 && choiceOptions.length === 0 && tuningOptions.length === 0) {
            return SafeDOM.createText('');
        }

        const card = SafeDOM.createElement('div', { class: 'card mb-4' });
        const cardBody = SafeDOM.createElement('div', { class: 'card-body' });

        const title = SafeDOM.createElement('h6', { class: 'text-dark mb-3' }, 'üõ† –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ');
        cardBody.appendChild(title);

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        if (standardOptions.length > 0) {
            cardBody.appendChild(this.createEquipmentSection('standard', '‚öôÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ', standardOptions, 'bg-secondary'));
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        if (choiceOptions.length > 0) {
            cardBody.appendChild(this.createEquipmentSection('choice', 'üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ', choiceOptions, 'bg-primary'));
        }

        // –¢—é–Ω–∏–Ω–≥
        if (tuningOptions.length > 0) {
            cardBody.appendChild(this.createEquipmentSection('tuning', 'üöÄ –¢—é–Ω–∏–Ω–≥', tuningOptions, 'bg-warning'));
        }

        card.appendChild(cardBody);
        return card;
    }

    /**
     * –°–µ–∫—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
     */
    createEquipmentSection(type, title, options, badgeClass) {
        const section = SafeDOM.createElement('div', { class: 'mb-3' });
        
        const toggle = SafeDOM.createElement('div', {
            class: 'd-flex justify-content-between align-items-center equipment-toggle'
        });
        toggle.addEventListener('click', () => this.toggleEquipmentDetails(type));

        toggle.appendChild(SafeDOM.createElement('strong', {}, title));
        
        const badge = SafeDOM.createElement('span', {
            class: `badge ${badgeClass}`
        }, options.length.toString());
        toggle.appendChild(badge);

        section.appendChild(toggle);

        // –î–µ—Ç–∞–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã)
        const details = SafeDOM.createElement('div', {
            class: 'equipment-details',
            'data-type': type,
            style: 'display: none;'
        });
        
        const detailsContent = SafeDOM.createElement('div', { class: 'mt-2' });
        
        const descriptions = this.convertEquipmentCodes(options);
        descriptions.forEach(desc => {
            const item = SafeDOM.createElement('div', { 
                class: 'small border-bottom py-1' 
            }, desc);
            detailsContent.appendChild(item);
        });
        
        details.appendChild(detailsContent);
        section.appendChild(details);

        return section;
    }

    // ========== –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
     */
    loadCarPhotos() {
        const gallery = document.getElementById('carGallery');
        const photos = this.getSafeData('mergedPhotos', []);

        if (photos.length === 0) {
            SafeDOM.render(gallery, this.createNoPhotosMessage());
            return;
        }

        const fragment = document.createDocumentFragment();
        
        photos.slice(0, 12).forEach((photo, index) => {
            const photoUrl = typeof photo === 'string' ? photo : (photo.path || '');
            
            const col = SafeDOM.createElement('div', { 
                class: 'col-6 col-md-4 col-lg-3' 
            });

            const ratio = SafeDOM.createElement('div', { class: 'ratio ratio-1x1' });
            const img = SafeDOM.createImage(
                photoUrl,
                `–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${index + 1}`,
                'img-fluid rounded'
            );
            img.style.objectFit = 'cover';
            img.style.cursor = 'pointer';
            
            img.addEventListener('click', () => this.openPhotoModal(photoUrl));
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
            img.addEventListener('error', () => {
                img.classList.add('photo-placeholder');
                img.style.display = 'flex';
                img.style.alignItems = 'center';
                img.style.justifyContent = 'center';
                img.innerHTML = 'üöó';
            });

            ratio.appendChild(img);
            col.appendChild(ratio);
            fragment.appendChild(col);
        });

        SafeDOM.render(gallery, fragment);
    }

    /**
     * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–æ—Ç–æ
     */
    createNoPhotosMessage() {
        const container = SafeDOM.createElement('div', { 
            class: 'col-12 text-center py-3' 
        });

        const content = SafeDOM.createElement('div', { class: 'text-muted' });
        const icon = SafeDOM.createElement('div', { style: 'font-size: 3rem;' }, 'üöó');
        const text = SafeDOM.createElement('p', {}, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');

        content.appendChild(icon);
        content.appendChild(text);
        container.appendChild(content);

        return container;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ sessionStorage
     */
    getSessionPrice() {
        try {
            const sessionPrice = sessionStorage.getItem(`carPrice_${this.carId}`);
            if (sessionPrice && !isNaN(sessionPrice)) {
                const price = parseInt(sessionPrice);
                return price > 0 ? price : null;
            }
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏–∑ sessionStorage');
        }
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ sessionStorage
     */
    getSessionPhotos() {
        try {
            const storedPhotos = sessionStorage.getItem(`carPhotos_${this.carId}`);
            if (storedPhotos) {
                return JSON.parse(storedPhotos);
            }
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ sessionStorage');
        }
        return [];
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    mergePhotos(catalogPhotos, apiPhotos) {
        const uniqueUrls = new Set();
        const result = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        catalogPhotos.forEach(photo => {
            if (photo && !uniqueUrls.has(photo)) {
                uniqueUrls.add(photo);
                result.push(photo);
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ API
        if (Array.isArray(apiPhotos)) {
            apiPhotos.forEach(photo => {
                const photoPath = typeof photo === 'string' ? photo : (photo.path || '');
                if (photoPath && !uniqueUrls.has(photoPath)) {
                    uniqueUrls.add(photoPath);
                    result.push(photoPath);
                }
            });
        }
        
        return result;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ sessionStorage
     */
    cleanupSessionStorage() {
        try {
            sessionStorage.removeItem(`carPrice_${this.carId}`);
            sessionStorage.removeItem(`carPhotos_${this.carId}`);
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å sessionStorage');
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏
     */
    getSafeData(path, defaultValue = null) {
        return path.split('.').reduce((acc, key) => {
            try {
                return acc && acc[key] !== undefined ? acc[key] : defaultValue;
            } catch {
                return defaultValue;
            }
        }, this.carData);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    getCarTitle() {
        const category = this.getSafeData('info.category', {});
        const parts = [
            category.manufacturerName,
            category.modelGroupName, 
            category.gradeName
        ].filter(Boolean);
        
        return parts.join(' ').trim() || '‚Äî';
    }

    /**
     * –ü–æ–∏—Å–∫ VIN
     */
    findVin() {
        const paths = [
            'info.vin',
            'checkup.master.detail.vin', 
            'open_data.vin'
        ];
        
        for (const path of paths) {
            const value = this.getSafeData(path);
            if (value) return value;
        }
        return '‚Äî';
    }

    /**
     * –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
     */
    findLicensePlate() {
        const plates = [];
        
        const vehicleNo = this.getSafeData('info.vehicleNo');
        if (vehicleNo) plates.push(vehicleNo);
        
        const carNo = this.getSafeData('open_data.carNo');
        if (carNo) plates.push(carNo);
        
        return plates.length > 0 ? plates.join(' / ') : '‚Äî';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    getContactType(type) {
        const types = {
            'MOBILE': '–º–æ–±–∏–ª—å–Ω—ã–π',
            'PHONE': '—Ç–µ–ª–µ—Ñ–æ–Ω',
            'FAX': '—Ñ–∞–∫—Å'
        };
        return types[type] || type;
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏—è
     */
    convertEquipmentCodes(codes) {
        return codes.map(code => {
            const formattedCode = code.toString().padStart(3, '0');
            return this.equipmentCodes[formattedCode] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è (${formattedCode})`;
        });
    }

    // ========== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

    toggleAccidentDetails() {
        const details = document.getElementById('accidentDetails');
        const summary = document.querySelector('.accident-summary');
        
        if (details && summary) {
            if (details.style.display === 'none' || !details.style.display) {
                details.style.display = 'block';
                summary.style.display = 'none';
                if (details.innerHTML === '') {
                    details.appendChild(this.createAccidentDetails());
                }
            } else {
                details.style.display = 'none';
                summary.style.display = 'block';
            }
        }
    }

    toggleInspectionDetails() {
        const details = document.getElementById('inspectionDetails');
        const summary = document.querySelector('.inspection-summary');
        
        if (details && summary) {
            if (details.style.display === 'none' || !details.style.display) {
                details.style.display = 'block';
                summary.style.display = 'none';
                if (details.innerHTML === '') {
                    details.appendChild(this.createInspectionDetails());
                }
            } else {
                details.style.display = 'none';
                summary.style.display = 'block';
            }
        }
    }

    toggleEquipmentDetails(type) {
        const details = document.querySelector(`.equipment-details[data-type="${type}"]`);
        if (details) {
            details.style.display = details.style.display === 'none' ? 'block' : 'none';
        }
    }

    openPhotoModal(photoUrl) {
        const modalPhoto = document.getElementById('modalPhoto');
        if (modalPhoto) {
            modalPhoto.src = photoUrl;
            const modal = new bootstrap.Modal(document.getElementById('photoModal'));
            modal.show();
        }
    }

    generateInspectionReport() {
        window.open(`/example/car/${this.carId}/inspection?lang=ru`, '_blank', 'noopener,noreferrer');
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
     */
    showError(message) {
        const content = document.getElementById('carContent');
        
        const alert = SafeDOM.createElement('div', { class: 'alert alert-danger text-center' });
        alert.appendChild(SafeDOM.createElement('h5', {}, '‚ùå –û—à–∏–±–∫–∞'));
        alert.appendChild(SafeDOM.createElement('p', {}, message));
        
        const retryButton = SafeDOM.createButton(
            '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
            () => this.init(),
            'btn btn-primary-custom btn-sm mt-2'
        );
        alert.appendChild(retryButton);
        
        const backButton = SafeDOM.createButton(
            '‚Üê –ù–∞–∑–∞–¥',
            () => window.history.back(),
            'btn btn-outline-secondary btn-sm ms-2 mt-2'
        );
        alert.appendChild(backButton);

        SafeDOM.render(content, alert);
    }
}