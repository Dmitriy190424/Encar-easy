/**
 * –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è
 */
class FiltersApp {
    constructor() {
        this.apiService = new ApiService();
        this.urlState = new URLStateManager();
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            await this.loadFilters();
            this.setupEventListeners();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async loadFilters() {
        const content = document.getElementById('filtersContent');
        
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ API
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            
            const filters = this.createFiltersStructure();
            this.renderFilters(content, filters);
            
        } catch (error) {
            console.error('Error loading filters:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    createFiltersStructure() {
        return {
            price: {
                title: 'üí∞ –¶–µ–Ω–∞',
                type: 'range',
                min: 0,
                max: 10000,
                step: 100,
                unit: '—Ç—ã—Å. —Ä—É–±'
            },
            year: {
                title: 'üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞',
                type: 'range',
                min: 1990,
                max: 2024,
                step: 1,
                unit: '–≥–æ–¥'
            },
            mileage: {
                title: 'üìè –ü—Ä–æ–±–µ–≥',
                type: 'range',
                min: 0,
                max: 300000,
                step: 1000,
                unit: '–∫–º'
            },
            fuel: {
                title: '‚õΩ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞',
                type: 'checkbox',
                options: [
                    { value: 'gasoline', label: '–ë–µ–Ω–∑–∏–Ω' },
                    { value: 'diesel', label: '–î–∏–∑–µ–ª—å' },
                    { value: 'hybrid', label: '–ì–∏–±—Ä–∏–¥' },
                    { value: 'electric', label: '–≠–ª–µ–∫—Ç—Ä–æ' }
                ]
            },
            transmission: {
                title: '‚öô –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á',
                type: 'checkbox',
                options: [
                    { value: 'manual', label: '–ú–µ—Ö–∞–Ω–∏–∫–∞' },
                    { value: 'auto', label: '–ê–≤—Ç–æ–º–∞—Ç' },
                    { value: 'cvt', label: '–í–∞—Ä–∏–∞—Ç–æ—Ä' }
                ]
            }
        };
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    renderFilters(container, filters) {
        const fragment = document.createDocumentFragment();
        
        Object.entries(filters).forEach(([key, filter]) => {
            const filterSection = this.createFilterSection(key, filter);
            fragment.appendChild(filterSection);
        });
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        fragment.appendChild(this.createActionButtons());
        
        SafeDOM.render(container, fragment);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    createFilterSection(key, filter) {
        const section = SafeDOM.createElement('div', {
            class: 'filter-section mb-4'
        });

        const title = SafeDOM.createElement('h5', {
            class: 'filter-title'
        }, filter.title);

        section.appendChild(title);

        switch (filter.type) {
            case 'range':
                section.appendChild(this.createRangeFilter(key, filter));
                break;
            case 'checkbox':
                section.appendChild(this.createCheckboxFilter(key, filter));
                break;
        }

        return section;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    createRangeFilter(key, filter) {
        const container = SafeDOM.createElement('div', {
            class: 'range-filter'
        });

        const currentValues = this.getCurrentFilterValues(key);
        const minValue = currentValues.min || filter.min;
        const maxValue = currentValues.max || filter.max;

        // Input –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const minInput = SafeDOM.createInput(
            'number',
            minValue,
            filter.min.toString(),
            'form-control mb-2',
            {
                id: `${key}_min`,
                min: filter.min,
                max: filter.max,
                step: filter.step
            }
        );

        // Input –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const maxInput = SafeDOM.createInput(
            'number',
            maxValue,
            filter.max.toString(),
            'form-control',
            {
                id: `${key}_max`,
                min: filter.min,
                max: filter.max,
                step: filter.step
            }
        );

        // –ü–æ–¥–ø–∏—Å—å —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        const unitLabel = SafeDOM.createElement('small', {
            class: 'text-muted'
        }, `(${filter.unit})`);

        container.appendChild(SafeDOM.createElement('label', {
            for: `${key}_min`
        }, '–û—Ç:'));
        container.appendChild(minInput);
        
        container.appendChild(SafeDOM.createElement('label', {
            for: `${key}_max`
        }, '–î–æ:'));
        container.appendChild(maxInput);
        container.appendChild(unitLabel);

        return container;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å —Ñ–∏–ª—å—Ç—Ä–∞
     */
    createCheckboxFilter(key, filter) {
        const container = SafeDOM.createElement('div', {
            class: 'checkbox-filter'
        });

        const currentValues = this.getCurrentFilterValues(key) || [];

        filter.options.forEach(option => {
            const isChecked = currentValues.includes(option.value);
            
            const checkboxContainer = SafeDOM.createElement('div', {
                class: 'form-check'
            });

            const checkbox = SafeDOM.createElement('input', {
                type: 'checkbox',
                value: option.value,
                id: `${key}_${option.value}`,
                class: 'form-check-input',
                checked: isChecked
            });

            const label = SafeDOM.createElement('label', {
                for: `${key}_${option.value}`,
                class: 'form-check-label'
            }, option.label);

            checkboxContainer.appendChild(checkbox);
            checkboxContainer.appendChild(label);
            container.appendChild(checkboxContainer);
        });

        return container;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–∞
     */
    getCurrentFilterValues(key) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ URL –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return [];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
     */
    createActionButtons() {
        const container = SafeDOM.createElement('div', {
            class: 'action-buttons mt-4'
        });

        const applyButton = SafeDOM.createButton(
            '‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã',
            () => this.applyFilters(),
            'btn btn-primary-custom me-2'
        );

        const resetButton = SafeDOM.createButton(
            'üóë –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã',
            () => this.resetFilters(),
            'btn btn-outline-secondary'
        );

        const saveButton = SafeDOM.createButton(
            'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
            () => this.saveFilters(),
            'btn btn-outline-primary-custom ms-2'
        );

        container.appendChild(applyButton);
        container.appendChild(resetButton);
        container.appendChild(saveButton);

        return container;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    applyFilters() {
        const filters = this.collectFilters();

        this.showSuccess('–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    }

    /**
     * –°–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    collectFilters() {
        const filters = {};
        
        // –°–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        ['price', 'year', 'mileage'].forEach(key => {
            const minInput = document.getElementById(`${key}_min`);
            const maxInput = document.getElementById(`${key}_max`);
            
            if (minInput && minInput.value) filters[`${key}_min`] = parseInt(minInput.value);
            if (maxInput && maxInput.value) filters[`${key}_max`] = parseInt(maxInput.value);
        });
        
        // –°–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π —á–µ–∫–±–æ–∫—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        ['fuel', 'transmission'].forEach(key => {
            const checkboxes = document.querySelectorAll(`input[type="checkbox"][id^="${key}_"]:checked`);
            filters[key] = Array.from(checkboxes).map(cb => cb.value);
        });
        
        return filters;
    }

    /**
     * –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    resetFilters() {
        // –°–±—Ä–æ—Å –≤—Å–µ—Ö input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const inputs = document.querySelectorAll('input[type="number"], input[type="checkbox"]');
        inputs.forEach(input => {
            if (input.type === 'number') {
                input.value = '';
            } else if (input.type === 'checkbox') {
                input.checked = false;
            }
        });
        
        this.showSuccess('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    saveFilters() {
        const filters = this.collectFilters();
        
        try {
            localStorage.setItem('savedFilters', JSON.stringify(filters));
            this.showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    loadSavedFilters() {
        try {
            const saved = localStorage.getItem('savedFilters');
            if (saved) {
                const filters = JSON.parse(saved);
                this.applySavedFilters(filters);
                this.showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            }
        } catch (error) {
            console.error('Error loading saved filters:', error);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    applySavedFilters(filters) {
        Object.entries(filters).forEach(([key, value]) => {
            if (key.endsWith('_min') || key.endsWith('_max')) {
                const input = document.getElementById(key);
                if (input) input.value = value;
            } else if (Array.isArray(value)) {
                value.forEach(val => {
                    const checkbox = document.getElementById(`${key}_${val}`);
                    if (checkbox) checkbox.checked = true;
                });
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    showSuccess(message) {
        this.showMessage(message, 'success');
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    showError(message) {
        this.showMessage(message, 'danger');
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    showMessage(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const alert = SafeDOM.createElement('div', {
            class: `alert alert-${type} alert-dismissible fade show`,
            role: 'alert',
            style: 'position: fixed; top: 20px; right: 20px; z-index: 1050;'
        });

        alert.appendChild(SafeDOM.createText(message));
        
        const closeButton = SafeDOM.createElement('button', {
            type: 'button',
            class: 'btn-close',
            'data-bs-dismiss': 'alert',
            'aria-label': 'Close'
        });

        alert.appendChild(closeButton);
        document.body.appendChild(alert);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (alert.parentNode) {
                alert.parentNode.removeChild(alert);
            }
        }, 3000);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const loadButton = document.getElementById('loadSavedFilters');
        if (loadButton) {
            loadButton.addEventListener('click', () => this.loadSavedFilters());
        }
    }
}
