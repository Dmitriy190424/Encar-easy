/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–µ—Ç–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
 */
class CarsGridComponent {
    constructor(container, onCarDetails, urlState) {
        this.container = container;
        this.onCarDetails = onCarDetails;
        this.urlState = urlState;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
     */
    render(carsData) {
        if (!carsData || !carsData.cars || carsData.cars.length === 0) {
            this.showEmptyState();
            return;
        }

        const fragment = document.createDocumentFragment();
        
        carsData.cars.forEach((car, index) => {
            const carCard = this.createCarCard(car, index);
            if (carCard) {
                fragment.appendChild(carCard);
            }
        });

        SafeDOM.render(this.container, fragment);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    createCarCard(car, index) {
        const col = SafeDOM.createElement('div', {
            class: 'col-xl-3 col-lg-4 col-md-6 d-flex'
        });

        const card = SafeDOM.createElement('div', {
            class: 'car-card d-flex flex-column h-100 w-100'
        });

        // –§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        card.appendChild(this.createCarImage(car));
        
        // –¢–µ–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏
        const cardBody = SafeDOM.createElement('div', {
            class: 'card-body d-flex flex-column flex-grow-1'
        });
        
        cardBody.appendChild(this.createCarTitle(car));
        cardBody.appendChild(this.createCarSpecs(car));
        cardBody.appendChild(this.createCarPrice(car));
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –Ω–∏–∑—É
        const buttonsContainer = SafeDOM.createElement('div', {
            class: 'mt-auto pt-3'
        });
        buttonsContainer.appendChild(this.createActionButtons(car));
        
        cardBody.appendChild(buttonsContainer);
        card.appendChild(cardBody);
        col.appendChild(card);
        
        return col;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å —Ñ–æ—Ç–æ
     */
    createCarImage(car) {
        const imageContainer = SafeDOM.createElement('div', {
            class: 'car-image'
        });

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ñ–æ—Ç–æ
        const firstPhoto = this.getFirstAvailablePhoto(car);
        
        if (firstPhoto) {
            // –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è img –±–µ–∑ SafeDOM –¥–ª—è URL
            const img = document.createElement('img');
            img.src = firstPhoto;
            img.alt = this.getCarTitle(car);
            img.className = 'img-fluid w-100 h-100';
            img.loading = 'lazy';
            img.style.objectFit = 'cover';
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
            img.addEventListener('error', () => {
                console.warn('Failed to load car photo:', firstPhoto);
                this.showPhotoPlaceholder(imageContainer);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            img.addEventListener('load', () => {
            });
            
            imageContainer.appendChild(img);

            // –°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
            const photoCount = this.getPhotoCount(car);
            if (photoCount > 1) {
                const photoCounter = SafeDOM.createElement('div', {
                    class: 'photo-counter'
                }, `üì∑ ${photoCount}`);
                imageContainer.appendChild(photoCounter);
            }
        } else {
            this.showPhotoPlaceholder(imageContainer);
        }

        return imageContainer;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ–æ—Ç–æ
     */
    getFirstAvailablePhoto(car) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: photos -> photo -> –Ω–µ—Ç —Ñ–æ—Ç–æ
        if (car.photos && car.photos.length > 0) {
            const photo = car.photos[0];
            // –§–ò–ö–°: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return photo;
        }
        if (car.photo) {
            return car.photo;
        }
        return null;
    }

    /**
     * –ü–æ–∫–∞–∑ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ç–æ
     */
    showPhotoPlaceholder(container) {
        const placeholder = SafeDOM.createElement('div', {
            class: 'd-flex align-items-center justify-content-center h-100 bg-light text-muted'
        }, 'üöó –ù–µ—Ç —Ñ–æ—Ç–æ');
        SafeDOM.render(container, placeholder);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
     */
    getPhotoCount(car) {
        if (car.photos && car.photos.length > 0) {
            return car.photos.length;
        }
        if (car.photo) {
            return 1;
        }
        return 0;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    createCarTitle(car) {
        const title = this.getCarTitle(car);
        const titleEl = SafeDOM.createElement('h6', {
            class: 'card-title text-dark mb-2',
            title: title
        }, title);
        
        return titleEl;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    createCarSpecs(car) {
        const specsContainer = SafeDOM.createElement('div', {
            class: 'car-specs small text-muted mb-3'
        });

        const year = car.form_year || '‚Äî';
        const mileage = car.mileage ? `${car.mileage.toLocaleString()} –∫–º` : '‚Äî';
        const fuel = car.fuel_type || '‚Äî';
        const transmission = car.transmission || '‚Äî';

        const specsText = SafeDOM.createElement('div', {}, `üìÖ ${year} ‚Ä¢ üìè ${mileage}`);
        const specsText2 = SafeDOM.createElement('div', {}, `‚õΩ ${fuel} ‚Ä¢ ‚öô ${transmission}`);
        
        specsContainer.appendChild(specsText);
        specsContainer.appendChild(specsText2);
        
        return specsContainer;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Ü–µ–Ω—ã
     */
    createCarPrice(car) {
        const priceRub = CurrencyService.convertToRub(car.price);
        const priceText = priceRub ? `${priceRub.toLocaleString()} —Ç—ã—Å.‚ÇΩ` : '‚Äî';
        
        const priceEl = SafeDOM.createElement('div', {
            class: 'price-tag mb-3'
        }, priceText);
        
        return priceEl;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
     */
    createActionButtons(car) {
        const buttonsContainer = SafeDOM.createElement('div', {
            class: 'd-grid gap-2'
        });

        // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        const detailsButton = SafeDOM.createButton('üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', 
            () => this.openCarDetails(car),
            'btn btn-primary-custom btn-sm'
        );
        buttonsContainer.appendChild(detailsButton);

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞ —Å–∞–π—Ç–µ Encar"
        const encarLink = SafeDOM.createLink('üåê –ù–∞ —Å–∞–π—Ç–µ Encar', 
            car.url,
            null,
            'btn btn-outline-secondary btn-sm',
            { target: '_blank', rel: 'noopener noreferrer' }
        );
        buttonsContainer.appendChild(encarLink);

        return buttonsContainer;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    openCarDetails(car) {
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ü–µ–Ω—É –∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const params = new URLSearchParams({
            price: car.price || '0',
            photos: JSON.stringify(car.photos || [])
        });
        
        const url = `/example/car/${car.car_id}?${params.toString()}`;
        window.open(url, '_blank', 'noopener,noreferrer');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    getCarTitle(car) {
        const parts = [];
        if (car.manufacturer) parts.push(car.manufacturer);
        if (car.model) parts.push(car.model);
        if (car.badge) parts.push(car.badge);
        if (car.badge_detail) parts.push(car.badge_detail);
        
        return parts.join(' ').trim() || '–ê–≤—Ç–æ–º–æ–±–∏–ª—å';
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
     */
    showEmptyState() {
        const emptyState = SafeDOM.createElement('div', {
            class: 'col-12 text-center py-5'
        });

        const content = SafeDOM.createElement('div', {
            class: 'text-muted'
        });

        const icon = SafeDOM.createElement('h5', {}, 'üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        const text = SafeDOM.createElement('p', {}, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤');

        content.appendChild(icon);
        content.appendChild(text);
        emptyState.appendChild(content);

        SafeDOM.render(this.container, emptyState);
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingState() {
        const loadingState = SafeDOM.createElement('div', {
            class: 'col-12 text-center py-5'
        });

        const spinner = SafeDOM.createElement('div', {
            class: 'spinner-border text-primary-custom',
            role: 'status'
        });
        spinner.appendChild(SafeDOM.createElement('span', {
            class: 'visually-hidden'
        }, '–ó–∞–≥—Ä—É–∑–∫–∞...'));

        const text = SafeDOM.createElement('p', {
            class: 'text-muted mt-2'
        }, '–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏...');

        loadingState.appendChild(spinner);
        loadingState.appendChild(text);

        SafeDOM.render(this.container, loadingState);
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
     */
    showErrorState(message) {
        const errorState = SafeDOM.createElement('div', {
            class: 'col-12'
        });

        const alert = SafeDOM.createElement('div', {
            class: 'alert alert-danger text-center'
        });

        const title = SafeDOM.createElement('h5', {}, '‚ùå –û—à–∏–±–∫–∞');
        const text = SafeDOM.createElement('p', {}, message);
        const retryButton = SafeDOM.createButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 
            () => window.location.reload(),
            'btn btn-primary-custom btn-sm mt-2'
        );

        alert.appendChild(title);
        alert.appendChild(text);
        alert.appendChild(retryButton);
        errorState.appendChild(alert);

        SafeDOM.render(this.container, errorState);
    }
}
